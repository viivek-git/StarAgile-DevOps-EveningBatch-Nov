Docker-Compose Tool:
============================

 Whenever we have to deploy multiple container with a single command we will use docker-compose tool

This tool used a file with name as docker-compose.yml

This file is written in YAML which is declarative nature

In the compose file we will  declare below details for multiple microservices, 
Image details
Port details
Volume details
Network details
Command details

When the compose file is executed, it will pull the image and create containers one after the other

Using this tool, we can created dependency between containers

Using this tool, we will be able to create multi container and delete all containers

Docker-compose when executed creates a custom bridge network due to which all the container created by docker-compose tool can communicate with each other using container hostname

YAML:
=====================

YAML stands for Yet another markup langauge or YAML aint a Mark up langauge

YAML is not programming or scripting language.

It is just a format of saving data in a file.

In YAML we save data as key and value pair
A key can store single value or a list of values
The file with YAML code should have an extension of yml or YAML

while writing YAML indentation is mandatory.

Syntax in YAML file:
key: value 

Value can be a:
 - String
 - Integer
 - decimal
 - Boolean

The key will always be given to us by the tool
- keys are tool specific 

Value is always given by the admin/user 

a key: value  ==> Map 

Example 1: A key storing single value 

---
company: StarAgile
Trainer: SonalMittal
Training: Docker 
Days: Weekdays
Time: 10AM
...

Example 2: A key storing list of values 

---
company: Simplilearn
Trainers: 
  - SonalMittal
  - Ravi
  - John
  - Rahul
Trainings: 
  - Docker 
  - kubernetes
  - Ansible
  - Jenkins
Days: 
  - Weekdays
  - Weekends
Time: 10AM
...

Example 3: A key storing list of Maps  

---
company: Simplilearn
Trainers: 
  - name: SonalMittal
    Email: Sonal@gmail.co
    phone: 3535446547
  - name: Ravi
    email: ravi@gmail.co
    phone: 43534534546



Install docker-compose tool:
*******************************************

curl -SL https://github.com/docker/compose/releases/download/v2.13.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

docker-compose --version


Demo for docker-compose:

# mkdir mycomposefiles
# cd mycomposefiles
# vim docker-compose.yml

version: '3'

services:
 db:
  image: mysql:5.7
  restart: always
  environment:
   MYSQL_ROOT_PASSWORD: password
   MYSQL_DATABASE: wordpress
   MYSQL_USER: wordpress
   MYSQL_PASSWORD: wordpress
 Wordpress:
  depends_on:
   - db
  image: wordpress
  ports:
   - '8000:80'
  restart: always
  environment:
   WORDPRESS_DB_HOST: db:3306
   WORDPRESS_DB_USER: wordpress
   WORDPRESS_DB_PASSWORD: wordpress
   WORDPRESS_DB_NAME: wordpress




# docker-compose up -d
# docker-compose ps

GO to the browser of the desktop

 Give  http://localhost:8000

On another browser give -    http://localhost:8181


# docker-compose down

===================================

Docker swarm
===================================================

We need a tool that can create any number of containers from single Image.
We need a tool that will distribute these containers on multiple VMs that have docker installed on them and they are connected with each other [Cluster].
We need a tool that can scale up the containers and scale down the containers- Auto Scaling of containers
We need a tool that will ensure desired count of containers are always running in the cluster - > High Availability
We need a tool that will  delete containers with old image and create containers with new Image -> Update Image for your Service

CONTAINER ORCHESTION TOOLS

Docker swarm
Kubernetes
Openshift
EKS - Elastic Kubernetes Service
GKE - Google Kubernetes Engine
AKS - Azure Kubernetes Service





# hostname MANAGER
# sudo su -

# docker swarm init

The current machine is now Leader machine

# copy the token which will look like this:

  docker swarm join --token SWMTKN-1-64dczervns37sw84jlb79fczskofbx9wh2x25vrv8x95s9o03m-75s49518smp5hxyyort6k8ing 172.31.41.114:2377


Go to Worker1 and worker 2  VM on the lab

# sudo su -

Paste the token

The machine will join the swarm cluster

Go to manager node

# docker node ls

You will see all the 3 nodes part of cluster



Demo 1: 

Create a service that will create 6 replicas of the Image nginx
The service will also distribute the replicas on the nodes of the Cluster 

# docker service create --name mysvc --replicas 6 nginx

# docker service ls

# docker service ps mysvc


Demo 2: Ensure that the desired count of replicas are always running in the cluster


Go to any worker node, delete the replica

# docker rm -f conatinerid


On the manager node , check the service

# docker service ls


The desired count matches the current count

Orchestration tool recreates a new replica to match current count and desired count.


Scaling in the swarm cluster
===================================
If we have created a service and we want to increase the desired count of replicas or reduce the desired count of replicas  the we use the docker service scale command

In docker swarm we cannot do autoscaling.

Scale up command:

# docker service scale mysvc=7

Scale down:

# docker service scale mysvc=2


Delete the service , all the replicas also get deleted

# docker service rm mysvc

=========================================
Demo 4:

# docker service create --name mysvc --replicas 2 -p 8989:3000 sonal04/samplepyapp:v1

#  docker service ls

Now go to the browser of the machine and give

http://localhost:8989

you will see request been sent to any one of the container
