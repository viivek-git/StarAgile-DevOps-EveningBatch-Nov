Project -1 : Certification Project – Finance Me

Use the below code repository to complete the project:
https://github.com/Sonal0409/banking-finance-Project1.git

Using the above code create a DevOps CICD pipeline

-	GIT and Github -> Maintain source code
-	Terraform to create a EC2 instance
-	Ansible -> Setup to install required packages
-	Jenkins -> Create Build Pipeline and integrate webhooks/pollSCM
-	Docker -> Use docker to build images and push to dockerhub
-	Prometheous and Grafana  - monitor Jenkins pipeline

Step 1: 
Create a VM and install Terraform on it
=============================
OS: ubuntu 22
Instance_type: t2.micro
Add Network settings  add security group -> All traffic and anywhere

Connect to the instance.
Steps to install terraform:
=================================
wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg

echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list

sudo apt update && sudo apt install terraform

Create Accesskey and secret key in AWS for terraform to connect:
Once Accesskey and secret key is created in AWS – IAM
Go and configure it on the terraform VM

Install awscli on the VM
# apt-get update
# apt-get install awscli -y
# aws configure

Give the valid access key

Give the valid secret key

Press enter, no need to give any region and format option
To verify if the credentials have been set for aws

# cat ~/.aws/credentials
Write terraform configuration file to create an EC2 server and install ansible on it.

# mkdir myproject
# cd myproject
# vim aws_infra.tf

provider "aws" {

region = "us-east-1"

shared_credentials_files =  ["~/.aws/credentials"]

}

resource "tls_private_key" "mykey" {
  algorithm = "RSA"

}

resource "aws_key_pair" "aws_key" {
  key_name   = "web-key"
  public_key = tls_private_key.mykey.public_key_openssh

  provisioner "local-exec" {
  command = "echo '${tls_private_key.mykey.private_key_openssh}' > ./web-key.pem"

}

}

resource "aws_vpc" "sl-vpc" {
 cidr_block = "10.0.0.0/16"
  tags = {
   Name = "sl-vpc"
}

}

resource "aws_subnet" "subnet-1"{

vpc_id = aws_vpc.sl-vpc.id
cidr_block = "10.0.1.0/24"
depends_on = [aws_vpc.sl-vpc]
map_public_ip_on_launch = true
  tags = {
   Name = "sl-subnet"
}

}


resource "aws_route_table" "sl-route-table"{
vpc_id = aws_vpc.sl-vpc.id
  tags = {
   Name = "sl-route-table"
}

}

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.subnet-1.id
  route_table_id = aws_route_table.sl-route-table.id
}


resource "aws_internet_gateway" "gw" {
 vpc_id = aws_vpc.sl-vpc.id
 depends_on = [aws_vpc.sl-vpc]
   tags = {
   Name = "sl-gw"
}

}

resource "aws_route" "sl-route" {

route_table_id = aws_route_table.sl-route-table.id
destination_cidr_block = "0.0.0.0/0"
gateway_id = aws_internet_gateway.gw.id


}

variable "sg_ports" {
type = list(number)
default = [8080,80,22,443]

}



resource "aws_security_group" "sl-sg" {
  name        = "sg_rule"
  vpc_id = aws_vpc.sl-vpc.id
  dynamic  "ingress" {
    for_each = var.sg_ports
    iterator = port
    content{
    from_port        = port.value
    to_port          = port.value
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    }
  }
egress {

    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]


}
}

resource "aws_instance" "myec2" {
  ami           = "ami-005fc0f236362e99f"
  instance_type = "t2.medium"
  key_name = "web-key"
  subnet_id = aws_subnet.subnet-1.id
  security_groups = [aws_security_group.sl-sg.id]
  tags = {
    Name = "Project-EC2"
  }
  provisioner "remote-exec" {
  connection {
    type     = "ssh"
    user     = "ubuntu"
    private_key = tls_private_key.mykey.private_key_pem
    host     = self.public_ip
  }
  inline = [
  "sudo apt update",
  "sudo apt install software-properties-common",
  "sudo add-apt-repository --yes --update ppa:ansible/ansible",
  "sudo apt install ansible -y"
]
}
}

# terraform init

# terraform apply --auto-approve

Step 2:  Install all the tools for CICD
Go the us-east-1 region:

Please connect to the newly created EC2 instance which has Ansible installed on it -> We can call this instance as Ansible Controller.
[make sure its instance type is t2.medium because we have to setup Jenkins, docker, monitoring tools on this]

Connect using EC2 instance connect
Check if ansible is installed:
# ansible --version
# sudo su –
Run the below commands for installing Jenkins: [Always take the lastest steps for Jenkins]

 
Add Jenkins key to the server
    #  sudo wget -O /usr/share/keyrings/jenkins-keyring.asc https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
Make Jenkins apt repo
    # echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null

Create a playbook with below code
# vim playbook1.yml


- name: Install and set up devops tools
  hosts: localhost
  become: true
  tasks:
  - name: Update the apt repo
    command: apt-get update 
  - name: Install multiple packages
    package: name={{item}} state=present
    loop:
     - git
     - docker.io
     - openjdk-17-jdk
  - name: update apt-repo
    command: sudo apt-get update
  - name: install jenkins
    command: sudo apt-get install jenkins -y
  - name: start Jenkins and docker service 
    service: name={{item}} state=started
    loop:
    - jenkins
    - docker
Save the file and run it

# ansible-playbook playbook1.yml

Step 3: Continuous Integration pipeline
==========================================================
Setup Jenkins dashboard and login to the Jenkins Dashboard.

Setup maven in tools section of Jenkins.

Create a Pipeline code to fetch code form github and test and build the code using maven commands.

pipeline{
    
    agent any
    
    tools{
        maven 'mymaven'
    }
    
    stages{
        stage('Clone Repo')
        {
            steps{
                git 'https://github.com/Sonal0409/banking-finance-Project1.git'
            }
        }
        stage('Test Code')
        {
            steps{
                sh 'mvn test'
            }
        }
        
        stage('Build Code')
        {
            steps{
                sh 'mvn package'
            }
        }
        
    }
}



Step 4: Containerize and implement microservice architecture
We will write a dockerfile and save it in the github repo

FROM openjdk:11
ARG JAR_FILE=target/*.jar
COPY ${JAR_FILE} app.jar
EXPOSE 8081
ENTRYPOINT ["java","-jar","/app.jar"]

We will go to the CICD pipeline in Jenkins  add a stage to  build dockerfile in to an Image

We will run the image to deploy application on container.

Before running the pipeline, go to the terminal of VM and execute this command:
This command will allow Jenkins to run docker commands
# chmod -R 777 /var/run/docker.sock

Final Pipeline code:

pipeline{
    
    agent any
    
    tools{
        maven 'mymaven'
    }
    
    stages{
        stage('Clone Repo')
        {
            steps{
                git 'https://github.com/Sonal0409/banking-finance-Project1.git'
            }
        }
        stage('Test Code')
        {
            steps{
                sh 'mvn test'
            }
        }
        
        stage('Build Code')
        {
            steps{
                sh 'mvn package'
            }
        }
        stage('Build Image')
        {
            steps{
                sh 'docker build -t myproject1:$BUILD_NUMBER .'
            }
        }
        
        stage('Deploy the Image')
        {
            steps{
                sh 'docker run -d -P myproject1:$BUILD_NUMBER '
            }
        }
    }
}
Monitoring of this Jenkins job using Prometheus and Grafana

To install and configure Prometheus and Grafana as monitoring and visualization tools, you can follow the steps below:

Create a system user for Prometheus using below commnds:
sudo useradd --no-create-home --shell /bin/false prometheus

Create the directories in which we will be storing our configuration files and libraries:
sudo mkdir /etc/prometheus
sudo mkdir /var/lib/prometheus
Set the ownership of the /var/lib/prometheus directory with below command:
sudo chown prometheus:prometheus /var/lib/prometheus
You need to inside /tmp :
cd /tmp/
Go to official pgae downloads Prometheus:

https://prometheus.io/download/#prometheus


# wget https://github.com/prometheus/prometheus/releases/download/v3.0.0/prometheus-3.0.0.linux-amd64.tar.gz

# sudo tar -xvf prometheus-3.0.0.linux-amd64.tar.gz
Move the configuration file and set the owner to the prometheus
cd prometheus-3.0.0.linux-amd64
sudo mv promotool /etc/prometheus
sudo mv prometheus.yml /etc/prometheus
sudo chown -R prometheus:prometheus /etc/prometheus
Move the binaries and set the owner:
sudo mv prometheus /usr/local/bin/
sudo chown prometheus:prometheus /usr/local/bin/prometheus
Create the service file using below command:
sudo nano /etc/systemd/system/prometheus.service
[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries

[Install]
WantedBy=multi-user.target

Reload systemd:
sudo systemctl daemon-reload

Start and enable Prometheus service:
sudo systemctl start prometheus
sudo systemctl enable prometheus
sudo systemctl status prometheus
Now access Prometehus in your browser
<server-ip>:9090
Step #2:Install Node Exporter on Ubuntu 22.04 LTS
# wget https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz
# sudo tar xvfz node_exporter-*.*-amd64.tar.gz

Move the binary file of node exporter to /usr/local/bin location.
sudo mv node_exporter-*.*-amd64/node_exporter /usr/local/bin/

Create a node_exporter user to run the node exporter service
sudo useradd -rs /bin/false node_exporter
Create a Custom Node Exporter Service
sudo nano /etc/systemd/system/node_exporter.service
[Unit]

Description=Node Exporter

After=network.target

 

[Service]

User=node_exporter

Group=node_exporter

Type=simple

ExecStart=/usr/local/bin/node_exporter

 

[Install]
WantedBy=multi-user.target
=======================
Reload the systemd
sudo systemctl daemon-reload

To Start, enable node exporter:
sudo systemctl enable node_exporter
sudo systemctl start node_exporter
sudo systemctl status node_exporter
Lets update our configuration file using below command:
sudo nano /etc/prometheus/prometheus.yml
- job_name: 'Node_Exporter'

    scrape_interval: 5s

    static_configs:

      - targets: ['<Server_IP_of_Node_Exporter_Machine>:9100']
After changes any configuration file we need to restart our prometheus
sudo systemctl restart prometheus.service

Step #3:Install Grafana on Ubuntu 22.04 LTS
Download the Grafana GPG key with wget, then pipe the output to apt-key. This will add the key to your APT installation’s list of trusted keys, which will allow you to download and verify the GPG-signed Grafana package:
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
Next, add the Grafana repository to your APT sources:
sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
Refresh your APT cache to update your package lists:
sudo apt update
You can now proceed with the installation:
sudo apt install grafana
Once Grafana is installed, use systemctl to start the Grafana server:
sudo systemctl start grafana-server
Next, verify that Grafana is running by checking the service’s status:
sudo systemctl status grafana-server
sudo systemctl enable grafana-server
Lets Access in browser:
<instance_ip>:3000
Output:
default username: admin
default password: admin
Click Add data source and select Prometheus
For the URL, enter http://localhost:9090 and click Save and test. You can see Data source is working.
Click on Save and Test.
Let’s add Dashboard for a better view in Grafana
Click On Dashboard → + symbol → Import Dashboard
Click on Import Dashboard paste this code 1860 and click on load


Step #4:Install Jenkins on Ubuntu 22.04 LTS
Installation of Java:
sudo apt update
sudo apt install fontconfig openjdk-17-jre
java -version
Install Jenkins from official website
Setup dashboard → install prometheus plugin -> restart Jenkins
To create a static target, you need to add job_name with static_configs
sudo vim /etc/prometheus/prometheus.yml


Paste below code
- job_name: 'jenkins'
   metrics_path: '/prometheus'
   static_configs:
     - targets: ['<jenkins-ip>:8080']
After changes in config file we need to restart prometheus
sudo systemctl restart prometheus
Check the targets section
http://<ip>:9090/targets
=============
Let’s add Dashboard for a better view in Grafana
Click On Dashboard → + symbol → Import Dashboard
Use Id 9964 and click on load












































